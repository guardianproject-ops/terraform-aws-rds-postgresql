name: terraform-aws-rds-postgresql
license: GPL3
gitlab_repo: guardianproject-ops/terraform-aws-rds-postgresql

description: Terraform module with opinions about deploying AWS RDS for Postgres

introduction: |-
  This is an opinionated wrapper around the [`terraform-aws-modules/rds/aws`][upstream] module for easily deploying a Postgres RDS instance.

  ### This module assumes

    * Your application/infra will create its own user and own database inside the RDS, and not use the root user
    * You want to run the latest minor version for your chosen major version üèÅ
    * You will use an admin user to create other users and databases for your application, you will not use the admin user or db directly
    * AWS Secrets Manager will store the admin user password
    * AWS Secrets Manager will rotate the admin user password  üèÅ
    * You want cloudwatch alarms piping alerts into SNS üèÅ

  üèÅ : indicates there are escape hatches using extra input variables

  ### Defaults
    * You specify your chosen major version, and the minor version is automatically upgraded to latest
    * The master user is `root`, and the password is in AWS Secrets Manager and rotated every 7 days

  ### Recomendations

    * Use RDS IAM Authentication for your users
    * Pin your major version
    * Set the `iops` var to an appropriate level for your workload
    * Set appropriate maintenance windows for minor version upgrades
    * Do not use the "root" user for your application, only admin operations
    * Use init containers or our [ansible RDS playbook](https://gitlab.com/guardianproject-ops/ansible-collection-common/-/blob/main/playbooks/rds.yml?ref_type=heads) for initializing your user and database
    * Set `max_allocated_storage` to get storage autoscaling

  [upstream]: https://registry.terraform.io/modules/terraform-aws-modules/rds/aws/latest

usage: |-

  See [`examples/simple`](./examples/simple).

  You choose your major postgres version with the `postgres_major_version` variable. If you want to pin to a specific minor version, then you also must specifiy `engine_version` and  `family`. Refer to the [Amazon RDS for PostgreSQL updates docs](https://docs.aws.amazon.com/AmazonRDS/latest/PostgreSQLReleaseNotes/postgresql-versions.html) for current values.


  ```terraform
  module "db" {
    source                              = "guardianproject-ops/rds-postgresql/aws"
    context                             = module.label_db.context
    allocated_storage                   = 20
    allow_access_cidr_blocks            = [var.cidr_allowed_to_talk_to_my_rds]
    apply_immediately                   = true
    deletion_protection_enabled         = false
    postgres_major_version              = "17"
    instance_class                      = "db.t3.medium"
    alarms_sns_topics                   = [var.my_alarm_topic]
    subnet_ids                          = var.subnet_ids
    vpc_id                              = var.vpc_id
  }
  ```

  ## Notes

  1. For an RDS instance with `storage_type` using `gp3`, be aware that `iops` and `storage_throughput` cannot be specified if the `allocated_storage` value is below a per-`engine` threshold. See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#gp3-storage) for details.

include:
  - docs/terraform.md

contributors:
  - name: "Abel Luck"
    gitlab: "abelxluck"
    gravatar: 0f605397e0ead93a68e1be26dc26481a
